{
  "project": {
    "name": "querifyjs",
    "description": "A No-SQL object query library made for javascript",
    "version": "0.10.0",
    "url": "https://github.com/pflannery/querifyjs"
  },
  "files": {
    "src\\Query.js": {
      "name": "src\\Query.js",
      "modules": {},
      "classes": {
        "Query": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "src\\QueryComparisons.js": {
      "name": "src\\QueryComparisons.js",
      "modules": {},
      "classes": {
        "QueryComparisons": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "src\\QueryOperations.js": {
      "name": "src\\QueryOperations.js",
      "modules": {},
      "classes": {
        "QueryOperations": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "src\\QueryPromise.js": {
      "name": "src\\QueryPromise.js",
      "modules": {},
      "classes": {
        "QueryPromise": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "src\\QueryPromiseComparisons.js": {
      "name": "src\\QueryPromiseComparisons.js",
      "modules": {},
      "classes": {
        "QueryPromiseComparisons": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "src\\QueryPromiseOperations.js": {
      "name": "src\\QueryPromiseOperations.js",
      "modules": {},
      "classes": {
        "QueryPromiseOperations": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "src\\QueryStackTrace.js": {
      "name": "src\\QueryStackTrace.js",
      "modules": {},
      "classes": {
        "QueryStackTrace": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "src\\global.js": {
      "name": "src\\global.js",
      "modules": {
        "QuerifyJs": 1
      },
      "classes": {
        "Global": 1
      },
      "fors": {},
      "namespaces": {}
    }
  },
  "modules": {
    "QuerifyJs": {
      "name": "QuerifyJs",
      "submodules": {},
      "classes": {
        "Query": 1,
        "QueryComparisons": 1,
        "QueryOperations": 1,
        "QueryPromise": 1,
        "QueryPromiseComparisons": 1,
        "QueryPromiseOperations": 1,
        "QueryStackTrace": 1,
        "Global": 1
      },
      "fors": {},
      "namespaces": {},
      "tag": "main",
      "file": "src\\global.js",
      "line": 92,
      "description": "###A No-SQL object query library made for javascript\n\n####Installing:\n\n######NodeJs:\n\nWill automatically reference any dependencies.\n\n     npm install querifyjs --save\n\n######Bower:\n\n     bower install querifyjs --save\n\n####Referencing:\n\n######Browser:\n\nDependencies:\n\n [promise-extras](http://github.com/pflannery/promise-extras) Only when you need to use promises, otherwise not required\n\n [dist/querify.all.min.js](https://github.com/pflannery/querifyjs/) includes this dependency\n\n     <script type=\"application/javascript\" src=\"path/to/lib/querify.all.min.js\"></script>\n\notherwise manually place before Querify library i.e.\n\n     <script type=\"application/javascript\" src=\"path/to/lib/promise-extras.min.js\"></script>\n     <script type=\"application/javascript\" src=\"path/to/lib/querify.min.js\"></script>\n\n ```javascript\n // global Query instance\n var querify = window.querify.sync;\n\n // global QueryPromise instance (lazy loads deps on first access to this property)\n var querify = window.querify.promise;\n ```\n\n######NodeJs:\n\n ```javascript\n // global Query instance (for synchronous operations)\n var querify = require('querifyjs').sync;\n\n // global QueryPromise instance\n var querify = require('querifyjs').promise;\n ```",
      "itemtype": "main"
    }
  },
  "classes": {
    "Query": {
      "name": "Query",
      "shortname": "Query",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "QuerifyJs",
      "namespace": "",
      "file": "src\\Query.js",
      "line": 6,
      "description": "Class for creating synchronous Query instances.",
      "is_constructor": 1,
      "params": [
        {
          "name": "queryOperations",
          "description": "",
          "type": "QueryOperations"
        },
        {
          "name": "queryComparisons",
          "description": "",
          "type": "QueryComparisons"
        },
        {
          "name": "queryStackTrace",
          "description": "",
          "type": "QueryStackTrace"
        },
        {
          "name": "sharedContext",
          "description": "passed to the custom compare methods",
          "type": "Object"
        }
      ]
    },
    "QueryComparisons": {
      "name": "QueryComparisons",
      "shortname": "QueryComparisons",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "QuerifyJs",
      "namespace": "",
      "file": "src\\QueryComparisons.js",
      "line": 6,
      "description": "Default compare methods."
    },
    "QueryOperations": {
      "name": "QueryOperations",
      "shortname": "QueryOperations",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "QuerifyJs",
      "namespace": "",
      "file": "src\\QueryOperations.js",
      "line": 5
    },
    "QueryPromise": {
      "name": "QueryPromise",
      "shortname": "QueryPromise",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "QuerifyJs",
      "namespace": "",
      "file": "src\\QueryPromise.js",
      "line": 6,
      "description": "Class for creating Promise based Query instances.",
      "is_constructor": 1,
      "params": [
        {
          "name": "queryOperations",
          "description": "",
          "type": "QueryOperations"
        },
        {
          "name": "queryComparisons",
          "description": "",
          "type": "QueryComparisons"
        },
        {
          "name": "queryStackTrace",
          "description": "",
          "type": "QueryStackTrace"
        },
        {
          "name": "sharedContext",
          "description": "passed to the custom compare methods",
          "type": "Object"
        }
      ]
    },
    "QueryPromiseComparisons": {
      "name": "QueryPromiseComparisons",
      "shortname": "QueryPromiseComparisons",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "QuerifyJs",
      "namespace": "",
      "file": "src\\QueryPromiseComparisons.js",
      "line": 6,
      "description": "Promise based compare methods.",
      "extends": "QueryComparisons"
    },
    "QueryPromiseOperations": {
      "name": "QueryPromiseOperations",
      "shortname": "QueryPromiseOperations",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "QuerifyJs",
      "namespace": "",
      "file": "src\\QueryPromiseOperations.js",
      "line": 6,
      "description": "Promise based compare methods.",
      "extends": "QueryOperations"
    },
    "QueryStackTrace": {
      "name": "QueryStackTrace",
      "shortname": "QueryStackTrace",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "QuerifyJs",
      "namespace": "",
      "file": "src\\QueryStackTrace.js",
      "line": 6
    },
    "Global": {
      "name": "Global",
      "shortname": "Global",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "QuerifyJs",
      "namespace": "",
      "file": "src\\global.js",
      "line": 92,
      "description": "global object"
    }
  },
  "classitems": [
    {
      "file": "src\\Query.js",
      "line": 28,
      "description": "Extracts items from an object dictionary using a query object",
      "itemtype": "method",
      "name": "extract",
      "async": 1,
      "params": [
        {
          "name": "modelDictionary",
          "description": "An object dictionary of model objects",
          "type": "Object"
        },
        {
          "name": "query",
          "description": "The query object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "an  dictionary of model objects.",
        "type": "Object"
      },
      "example": [
        "\n     // the data to query\n     var modelDictionary = {\n         \"item1\": {\n             name: 'cyborg',\n             age: 123\n         },\n         \"item2\": {\n             name: 'borg',\n             age: 223\n         }\n     };\n\n     // the query\n     var query = {\n         name: {\n             $equals: 'cyborg'\n         }\n     };\n\n     // run the query\n     var results = querify.extract(modelDictionary, query)\n     // the results, an extracted model dictionary"
      ],
      "class": "Query",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\Query.js",
      "line": 94,
      "description": "Filters an array of model objects against a query object",
      "itemtype": "method",
      "name": "filter",
      "async": 1,
      "params": [
        {
          "name": "modelArray",
          "description": "An array of data objects",
          "type": "Array"
        },
        {
          "name": "query",
          "description": "The query object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "who's result is set to an {Array} of filtered objects.",
        "type": "Promise"
      },
      "example": [
        "\n     // the data to query\n     var model = [{\n         name: 'cyborg',\n         age: 123\n     }, {\n         name: 'borg',\n         age: 223\n     }];\n\n     // the query\n     var query = {\n         name: {\n             $equals: 'cyborg'\n         }\n     };\n\n     // run the query\n     var results = querify.filter(model, query)\n     // the results, a filtered array"
      ],
      "class": "Query",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\Query.js",
      "line": 156,
      "description": "Tests if an array of model objects match against a query object",
      "itemtype": "method",
      "name": "many",
      "async": 1,
      "params": [
        {
          "name": "modelArray",
          "description": "An array of data objects",
          "type": "Array"
        },
        {
          "name": "query",
          "description": "The query object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "who's result is set to a {Boolean}.",
        "type": "Promise"
      },
      "example": [
        "\n     // the data to query\n     var model = [{\n         name: 'cyborg',\n         age: 123\n     }, {\n         name: 'borg',\n         age: 223\n     }];\n\n     // the query\n     var query = {\n             name: {\n             $right: 'g'\n         },\n         age: {\n             $typeof: 'number'\n         }\n     };\n\n     // run the query\n     var result = querify.many(model, query)\n     // the result, true or false"
      ],
      "class": "Query",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\Query.js",
      "line": 212,
      "description": "Tests one model object against a query object",
      "itemtype": "method",
      "name": "one",
      "async": 1,
      "params": [
        {
          "name": "model",
          "description": "The data object",
          "type": "Object"
        },
        {
          "name": "query",
          "description": "The query object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "who's result is set to a {Boolean}.",
        "type": "Promise"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         name: {\n             $right: 'g',\n             $and: {\n                 $left: 'cy'\n             }\n         },\n         $and: {\n             age: {\n                 $typeof: 'number',\n                 $and: {\n                     $equals: 123\n                 }\n             }\n         }\n     };\n\n     // run the query\n     var result = querify.one(model, query)\n     // the result, true or false"
      ],
      "class": "Query",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\Query.js",
      "line": 267,
      "description": "Tests if any of the models from an array match against a query object",
      "itemtype": "method",
      "name": "some",
      "params": [
        {
          "name": "modelArray",
          "description": ""
        },
        {
          "name": "query",
          "description": ""
        }
      ],
      "return": {
        "description": "who's result is set to a {Boolean}.",
        "type": "Promise"
      },
      "example": [
        "\n     // the data to query\n     var model = [{\n         name: 'cyborg',\n         age: 123\n     }, {\n         name: 'borg',\n         age: 223\n     }];\n\n     // the query\n     var query = {\n         age: {\n             $equals: 223\n         }\n     };\n\n     // run the query\n     var result = querify.some(model, query)\n     // the result, true or false"
      ],
      "class": "Query",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 15,
      "description": "Default compare method that is used when no compare method is specified in the query.",
      "itemtype": "method",
      "name": "$default",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": "Can be either a string value or a",
          "type": "Regexp"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         author: 'cyborg',\n         title: 'cybertron'\n     };\n\n     // the query\n     var query = {\n         author: 'cyborg', // equiv to author: {$default: 'cyborg'}\n         title: /^cyber/   // equiv to title: {$default: /^cyber/}\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 42,
      "description": "Equality and type check. Equivalent to using '==='",
      "itemtype": "method",
      "name": "$equals",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         name: {\n             $equals: 'cyborg'\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 66,
      "description": "Regular expression",
      "itemtype": "method",
      "name": "$regexp",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         age: {\n             $regexp: /\\d/ig\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 89,
      "description": "Match a {String} from the left",
      "itemtype": "method",
      "name": "$left",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         age: {\n             $left: 'cyb'\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 112,
      "description": "Matches a {String} from the right",
      "itemtype": "method",
      "name": "$right",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         age: {\n             $right: 'org'\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 136,
      "description": "Typeof",
      "itemtype": "method",
      "name": "$typeof",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         age: {\n             $typeof: 'number'\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 159,
      "description": "instanceof",
      "itemtype": "method",
      "name": "$instanceof",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         age: {\n             $instanceof: Object\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 182,
      "description": "Converts the modelValue to lower case before making the comparison",
      "itemtype": "method",
      "name": "$toLowerCase",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'CYBORG',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         name: {\n             $toLowerCase: 'cyborg'\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 205,
      "description": "Converts the modelValue to upper case before making the comparison",
      "itemtype": "method",
      "name": "$toUpperCase",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         name: {\n             $toUpperCase: 'CYBORG'\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 228,
      "description": "Matches the modelValue against an array of values",
      "itemtype": "method",
      "name": "$inArray",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testArray",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         name: {\n             $inArray: ['cyborg', 'or-me']\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 251,
      "description": "Matches the model property names against a single or an array of value(s)",
      "itemtype": "method",
      "name": "$has",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "testValue",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         $has: 'name'\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 278,
      "description": "Matches a query against the model children properties. i.e. return querify.one(model, query)",
      "itemtype": "method",
      "name": "$queryOne",
      "params": [
        {
          "name": "modelValue",
          "description": ""
        },
        {
          "name": "query",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         book: {\n             title: 'test',\n             author: 'fred'\n         }\n     };\n\n     // the query\n     var query = {\n         book: {\n             $queryOne: {\n                 title: {\n                     $equals: 'test'\n                 }\n             }\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 307,
      "description": "Matches a query against an array of models. i.e. return querify.many(modelArray, query)",
      "itemtype": "method",
      "name": "$queryMany",
      "params": [
        {
          "name": "modelArray",
          "description": ""
        },
        {
          "name": "query",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         books: [{\n             title: 'test',\n             author: 'fred'\n         }, {\n             title: 'another book',\n             author: 'fred'\n         }]\n     };\n\n     // the query\n     var query = {\n         books: {\n             $queryMany: {\n                 author: {\n                     $equals: 'fred'\n                 }\n             }\n         }\n     };"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryComparisons.js",
      "line": 343,
      "description": "Matches a query against an array of models. i.e. return querify.some(modelArray, query)",
      "itemtype": "method",
      "name": "$querySome",
      "params": [
        {
          "name": "modelArray",
          "description": ""
        },
        {
          "name": "query",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "example": [
        "\n\n// same as $queryMany except iterates until finds first match, no matches or errors\n"
      ],
      "class": "QueryComparisons",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryPromise.js",
      "line": 28,
      "description": "Extracts items from an object dictionary using a query object",
      "itemtype": "method",
      "name": "extract",
      "async": 1,
      "params": [
        {
          "name": "modelDictionary",
          "description": "An object dictionary of model objects",
          "type": "Object"
        },
        {
          "name": "query",
          "description": "The query object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "an  dictionary of model objects.",
        "type": "Object"
      },
      "example": [
        "\n     // the data to query\n     var modelDictionary = {\n         \"item1\": {\n             name: 'cyborg',\n             age: 123\n         },\n         \"item2\": {\n             name: 'borg',\n             age: 223\n         }\n     };\n\n     // the query\n     var query = {\n         name: {\n             $equals: 'cyborg'\n         }\n     };\n\n     // run the query\n     querify.extract(modelDictionary, query)\n             .then(function (results) {\n                 // the results, an extracted model dictionary\n             }).catch (function (error) {\n                 // catch any errors\n             })\n             .then(function () {\n                 // finally\n             });"
      ],
      "class": "QueryPromise",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryPromise.js",
      "line": 110,
      "description": "Filters an array of model objects against a query object",
      "itemtype": "method",
      "name": "filter",
      "async": 1,
      "params": [
        {
          "name": "modelArray",
          "description": "An array of data objects",
          "type": "Array"
        },
        {
          "name": "query",
          "description": "The query object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "who's result is set to an {Array} of filtered objects.",
        "type": "Promise"
      },
      "example": [
        "\n     // the data to query\n     var model = [{\n         name: 'cyborg',\n         age: 123\n     }, {\n         name: 'borg',\n         age: 223\n     }];\n\n     // the query\n     var query = {\n         name: {\n             $equals: 'cyborg'\n         }\n     };\n\n     // run the query\n     querify.filter(model, query)\n             .then(function (results) {\n                 // the results, a filtered array\n             }).catch (function (error) {\n                 // catch any errors\n             })\n             .then(function () {\n                 // finally\n             });"
      ],
      "class": "QueryPromise",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryPromise.js",
      "line": 188,
      "description": "Tests if an array of model objects match against a query object",
      "itemtype": "method",
      "name": "many",
      "async": 1,
      "params": [
        {
          "name": "modelArray",
          "description": "An array of data objects",
          "type": "Array"
        },
        {
          "name": "query",
          "description": "The query object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "who's result is set to a {Boolean}.",
        "type": "Promise"
      },
      "example": [
        "\n     // the data to query\n     var model = [{\n         name: 'cyborg',\n         age: 123\n     }, {\n         name: 'borg',\n         age: 223\n     }];\n\n     // the query\n     var query = {\n             name: {\n             $right: 'g'\n         },\n         age: {\n             $typeof: 'number'\n         }\n     };\n\n     // run the query\n     querify.many(model, query)\n             .then(function (result) {\n                 // the result, true or false\n             })\n             .catch (function (error) {\n                 // catch any errors\n             })\n             .then(function () {\n                 // finally\n             });"
      ],
      "class": "QueryPromise",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryPromise.js",
      "line": 252,
      "description": "Tests one model object against a query object",
      "itemtype": "method",
      "name": "one",
      "async": 1,
      "params": [
        {
          "name": "model",
          "description": "The data object",
          "type": "Object"
        },
        {
          "name": "query",
          "description": "The query object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "who's result is set to a {Boolean}.",
        "type": "Promise"
      },
      "example": [
        "\n     // the data to query\n     var model = {\n         name: 'cyborg',\n         age: 123\n     };\n\n     // the query\n     var query = {\n         name: {\n             $right: 'g',\n             $and: {\n                 $left: 'cy'\n             }\n         },\n         $and: {\n             age: {\n                 $typeof: 'number',\n                 $and: {\n                     $equals: 123\n                 }\n             }\n         }\n     };\n\n     // run the query\n     querify.one(model, query)\n             .then(function (result) {\n                 // the result\n             }).catch (function (error) {\n                 // catch any errors\n             })\n             .then(function () {\n                 // finally\n             });"
      ],
      "class": "QueryPromise",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryPromise.js",
      "line": 314,
      "description": "Tests if any of the models from an array match against a query object",
      "itemtype": "method",
      "name": "some",
      "params": [
        {
          "name": "modelArray",
          "description": ""
        },
        {
          "name": "query",
          "description": ""
        }
      ],
      "return": {
        "description": "who's result is set to a {Boolean}.",
        "type": "Promise"
      },
      "example": [
        "\n     // the data to query\n     var model = [{\n         name: 'cyborg',\n         age: 123\n     }, {\n         name: 'borg',\n         age: 223\n     }];\n\n     // the query\n     var query = {\n         age: {\n             $equals: 223\n         }\n     };\n\n     // run the query\n     querify.some(model, query)\n             .then(function (result) {\n                 // the result, true or false\n             })\n             .catch (function (error) {\n                 // catch any errors\n             })\n             .then(function () {\n                 // finally\n             });"
      ],
      "class": "QueryPromise",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\QueryStackTrace.js",
      "line": 17,
      "description": "Stores the trace stack of operations and results made my Query or QueryPromise",
      "itemtype": "property",
      "name": "stack",
      "type": "Array",
      "class": "QueryStackTrace",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\global.js",
      "line": 100,
      "description": "A reference to the global QueryPromise instance.",
      "itemtype": "property",
      "name": "promise",
      "type": "QueryPromise",
      "example": [
        "\n\n     // referencing the Promise instance\n     var querify = window.querify.promise;\n\n     // accessing the interface\n     querify.one(model, query)\n             .then(function(result) {\n\n             });"
      ],
      "class": "Global",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\global.js",
      "line": 126,
      "description": "A reference to the synchronous Query global instance.",
      "itemtype": "property",
      "name": "sync",
      "type": "Query",
      "example": [
        "\n\n     // referencing the synchronous instance\n     var querify = window.querify.sync;\n\n     // accessing the interface\n     querify.one(model, query);"
      ],
      "class": "Global",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\global.js",
      "line": 140,
      "description": "A reference to the Query class type for custom initiation.",
      "itemtype": "property",
      "name": "Query",
      "type": "Query",
      "class": "Global",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\global.js",
      "line": 145,
      "description": "A reference to the QueryOperations class type for custom initiation.",
      "itemtype": "property",
      "name": "QueryOperations",
      "type": "QueryOperations",
      "class": "Global",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\global.js",
      "line": 150,
      "description": "A reference to the QueryStackTrace class type for custom initiation.",
      "itemtype": "property",
      "name": "QueryStackTrace",
      "type": "QueryStackTrace",
      "class": "Global",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\global.js",
      "line": 157,
      "description": "An reference to the QueryPromise class type for custom initiation.",
      "itemtype": "property",
      "name": "QueryPromise",
      "type": "QueryPromise",
      "class": "Global",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\global.js",
      "line": 166,
      "description": "An reference to the QueryPromiseOperations class type for custom initiation.",
      "itemtype": "property",
      "name": "QueryPromiseOperations",
      "type": "QueryPromiseOperations",
      "class": "Global",
      "module": "QuerifyJs"
    },
    {
      "file": "src\\global.js",
      "line": 175,
      "description": "An reference to the QueryPromiseComparisons class type for custom initiation.",
      "itemtype": "property",
      "name": "QueryPromiseComparisons",
      "type": "QueryPromiseComparisons",
      "class": "Global",
      "module": "QuerifyJs"
    }
  ],
  "warnings": []
}